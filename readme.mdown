# Testing Library Mobile Sites using YSlow

This is a project meant to automate testing library mobile websites with the performance heuristic tool YSlow, developed by Yahoo!. It can accept a JSON file of a certain format, run YSlow on each site, and save a subset of the YSlow "grades" as rows in a CSV output file. Example usage:

```sh
./test-sites.sh alexa-top10.json
# prints out a bunch of messages
# saves YSlow results to a CSV, analysis.csv
```

Also included is a script to scrape the names and URLs of library mobile sites from the [M-Libraries](http://www.libsuccess.org/index.php?title=M-Libraries#Mobile_interfaces_.28and.2For_OPACS.29) entry on the Library Success wiki, which is the largest list of library mobile sites I know of. It's just client-side JavaScript, so open a console & paste the code in. Chrome's Dev Tools have a `copy` command, so to get the output into your clipboard you can do `copy( JSON.stringify( jsonoutput ) )`.

Not included are the actual results of running the script, but I intend to re-run it & publish the data here alongside the code.

## Dependencies

- Node.js - in Homebrew, `brew install node`
- PhantomJS - in Homebrew, `brew install phantomjs`
- [JShon](http://kmkeen.com/jshon/) - in Homebrew, `brew install jshon`
- YSlow built for PhantomJS - on GitHub, it's included as a submodule, so
  - `git submodule init; git submodule update`
  - & then to `make` the PhantomJS build, run `cd yslow; make phantomjs; cd ..` from inside this project's root

I assume most are readily available on Linux, too. JShon isn't in `apt` but [here are some installation instructions](http://wiki.alfresco-shell-tools.googlecode.com/git-history/8bd1a104496176b737d9f4056651a18234b4df99/InstallationGuide.wiki) I found.

## Included Files

**alexa-top10.json** - a list of the top 10 sites in the U.S. from [Alexa](http://www.alexa.com/topsites/countries/US) for comparison purposes. If a mobile site is available, I used that URL rather than the main site.

**analyze-url.sh** - this script analyzes a single URL & can be run on its own. At its simplest, usage is `./analyze-url.sh $URL` while you can specify a title for the URL with `./analyze-url.sh -u $URL -t $TITLE`. It writes the output to a CSV file named analysis.csv in the project root.

**m-libraries.json** - a list of mobile library websites scraped from the Library Success wiki. I manually removed some sites which were either broken or not appropriate for various reasons.

**parse-m-libraries.js** - a script to scrape mobile library website URLs from the Library Success wiki.

**test-sites.sh** - a script to take a JSON file, structured such as either of the two included here, & run analyze-url.sh on each site.

## Results

Not written yet, but they'll go right here.

### Caveats

- The list of library mobile sites is not comprehensive & probably very self-selecting, as only libraries aware of the Library Success wiki would bother listing their site there.
- YSlow
  - does not measure what really matters in performance, e.g. the user's experience of how quickly a site loads (which â‰  page load time) & reacts to interaction.
  - does measure a number of important aspects which generally correlate with improved performance.
  - The subset of YSlow's many metrics is fairly arbitrary, they tend to be things that I personally think are important & easy to understand/improve.

## License

All original code (e.g. the shell scripts, the JavaScript to scrape the Library Success wiki) & data collected in this repository is under the [Open Database License](http://opendatacommons.org/licenses/odbl/) by Open Data Commons.

> This Mobile Library Website Study is made available under the Open Database License: http://opendatacommons.org/licenses/odbl/1.0/. Any rights in individual contents of the database are licensed under the Database Contents License: http://opendatacommons.org/licenses/dbcl/1.0/ - See more at: http://opendatacommons.org/licenses/odbl/#sthash.Tk3QeWNR.dpuf

Note that the software dependencies all come with their own licenses which are different from the above. See, for instance, the LICENSE.txt in the YSlow repository.
